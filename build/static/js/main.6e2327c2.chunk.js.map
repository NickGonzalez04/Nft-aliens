{"version":3,"sources":["assets/twitter-logo.svg","components/loading.js","components/mintComponent.js","components/mintCount.js","components/header.js","assets/opensea.svg","components/nftCard.js","eth/helperFunc.js","App.js","index.js"],"names":["MineLoader","src","width","height","frameBorder","class","allowFullScreen","className","CONTRACT_ADDRESS","MintComponent","useState","mining","setMining","setmintCount","triggerContractToMint","a","window","ethereum","console","log","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","DopeNft","abi","getTotalMints","constructDopeNft","nftTranx","wait","hash","getNftCount","nftAmount","amount","parseInt","useEffect","onClick","MintCount","mintCount","Header","NftCard","opensea","href","alt","opensealogo","contractAddress","tokenId","network","mintEventListener","on","from","toNumber","alert","open","error","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","App","currentAcct","setCurrentAcct","detectWalletConnection","networkVersion","request","method","accounts","length","acct","walletConnect","twitterLogo","target","rel","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e2327c2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useState } from 'react';\n\nconst MineLoader =()=>{\n    return(\n        <div>\n          <iframe src=\"https://giphy.com/embed/6fDQ3k4IOqnEA\" width=\"480\" height=\"310\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p className=\"header-small gradient-text-count\">NFT is being minted, be ready in a few...</p>  \n        </div>\n    )\n}\n\nexport default MineLoader;","import { ethers } from 'ethers';\nimport DopeNft from \"../utils/dopeNft.json\";\nimport React, { useState, useEffect } from 'react';\nimport MineLoader from \"./loading\";\n//Address of deployed contract\nconst CONTRACT_ADDRESS = \"0x1238E2c79e1a138974cc9f620D845AC540c55C4b\";\n;\n\nconst MintComponent = ()=>{\n  const [mining, setMining ] = useState(false);\n  const [mintCount, setmintCount] = useState(0)\n// Call to the contract to mint NFT \n const triggerContractToMint = async () => {\n   \n    try {\n        const { ethereum } = window;\n        console.log('here', CONTRACT_ADDRESS);\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n            let nftAmount = connectedContract.getTotalMints();\n            // console.log(nftAmount);\n            // console.log(\"Going to pop wallet now to pay gas...\");\n            let nftTranx = await connectedContract.constructDopeNft();\n            setMining(true);\n            // console.log(\"Mining...please wait.\")\n            await nftTranx.wait();\n            setMining(false);\n            console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTranx.hash}`);\n    \n          } else {\n            console.log(\"Ethereum object doesn't exist!\");\n          }\n            } catch (error) {\n          console.log(error)\n        }\n    };\n\n    const getNftCount = async () => {\n      try {\n        const { ethereum } = window;\n        console.log('here', CONTRACT_ADDRESS);\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n            let nftAmount = await connectedContract.getTotalMints();\n            let amount = parseInt(nftAmount)\n            setmintCount(amount);\n        }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\nuseEffect(()=>{\n    getNftCount()\n}, [])\n\n    if(mining) {\n      return <MineLoader />;\n    }\n\n\n  return (\n  <div>\n    <button onClick={triggerContractToMint} className=\"cta-button mint-button\">\n      Mint My Alien NFT !\n    </button>\n  </div>\n  )\n};\n\nexport default MintComponent;","import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport DopeNft from \"../utils/dopeNft.json\";\nconst CONTRACT_ADDRESS = \"0x1238E2c79e1a138974cc9f620D845AC540c55C4b\";\nconst TOTAL_MINT_COUNT = 50;\n\n\nconst MintCount = () =>{\n    const [mintCount, setmintCount] = useState(0);\n\n    const getNftCount = async () => {\n        try {\n          const { ethereum } = window;\n          console.log('here', CONTRACT_ADDRESS);\n          if (ethereum) {\n              const provider = new ethers.providers.Web3Provider(ethereum);\n              const signer = provider.getSigner();\n              const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n              let nftAmount = await connectedContract.getTotalMints();\n              let amount = parseInt(nftAmount)\n              setmintCount(amount);\n          }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  \n  \n  useEffect(()=>{\n      getNftCount()\n  }, []);\n\n\n  return(\n    <div>\n        <p className=\"header-small gradient-text-count\"> Minted:&nbsp;{mintCount} / {TOTAL_MINT_COUNT}</p>\n    </div>\n  )};\n\n  export default MintCount;","import React from 'react';\nimport MintCount from \"./mintCount\";\n\nconst Header = () =>{\n\n\n\n    return(\n        <div className=\"top-header\">\n            <MintCount />\n        </div>\n    )\n};\n\nexport default Header;","export default __webpack_public_path__ + \"static/media/opensea.203348e1.svg\";","import React from 'react';\nimport '../styles/App.css';\nimport opensealogo from '../assets/opensea.svg'\nconst NftCard = ({opensea}) => {\n\n    return(\n    <div>\n      <p><a href={opensea} className=\"collection-link\"><img height=\"20px\" alt=\"opensea-logo\" src={opensealogo}/> View Collection </a></p>\n      <p className=\"sub-text-body\">You can buy the first<a className=\"header-small gradient-text-count\">&nbsp;#000</a> minted Alien here 👇 </p>\n        <nft-card\n          contractAddress=\"0xce15bbc069b34815163cc217ba0c32a1802e36f9\"\n          tokenId=\"3\"\n          network=\"rinkeby\"\n        ></nft-card>\n      </div>\n    )\n};\n\n\nexport default NftCard;","import { ethers } from 'ethers';\nimport DopeNft from \"../utils/dopeNft.json\";\n\n//Address of deployed contract\nconst CONTRACT_ADDRESS = \"0x1238E2c79e1a138974cc9f620D845AC540c55C4b\";\n// Event listener to the capture event function from contract.   \nexport const mintEventListener = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          DopeNft.abi,\n          signer\n        );\n  \n        // Create connection to contract and emits (throws) it when from address and tokenId is passed in.\n        connectedContract.on(\"newAlienNFT\", (from, tokenId) => {\n          //safe check we have the right data\n          console.log(from, tokenId.toNumber());\n          alert(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Click 'Ok' and we will take you to your new NFT!`\n          );\n          window.open(`https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n      } else {\n        alert(`Oops something went wrong`);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  ","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport MintComponent from \"./components/mintComponent\";\nimport Header from \"./components/header\";\nimport NftCard from \"./components/nftCard\";\nimport MintCount from \"./components/mintCount\";\nimport { mintEventListener } from \"./eth/helperFunc\";\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_HANDLE_ME = 'NickGonzalez__'\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/collection/back-to-the-ether-1\"';\n\n\nconst App = () => {\n  // state management for storing a users address\n  const [ currentAcct, setCurrentAcct ] = useState(\"\");\n\n  // Checking for meta mask wallet.\n  const detectWalletConnection = async () =>{\n   \n      const { ethereum } = window;\n      if(ethereum.networkVersion != \"4\"){\n      alert(\"Need to be on the Rinkeby Test net!\");\n      return;\n      }\n    // signals if ethereum (Metamask) is not detected in the console for now\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object!\", ethereum);\n    }\n    console.log(window.ethereum.networkVersion, 'window.ethereum.networkVersion');\n    \n    //Check authorization on a users wallet.'ethereum.request' using the method 'eth_accounts' allows for a check for any accounts that have been authorized.\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    //As long as it is not zero, it can grab the first eth account availible.\n    if (accounts.length !== 0) {\n      const acct = accounts[0];\n      // setting the account found to state\n      setCurrentAcct(acct);\n      mintEventListener();\n    } else {\n      console.log(\"No Authorized Account Found\");\n    }\n  }\n  // Establish wallet conntection\n const walletConnect = async () => {\n    try {\n      const { ethereum } = window;\n      if(ethereum.networkVersion != \"4\"){\n        alert(\"Need to be on the Rinkeby Test net!\");\n        return;\n      }\n      if (!ethereum) {\n        alert(\"Need to get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      // set wallet address to state once connected established\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAcct(accounts[0]);\n      mintEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <div>\n      <button onClick={walletConnect} className=\"cta-button connect-wallet-button\">\n        Connect to Wallet\n      </button>\n    </div>\n  );\n\n  const connectedWallet = () => (\n    <div className=\"connected-wallet-status\">\n      <p className=\"sub-text\"><span className=\"connection-status\"></span>Walleted Connected</p>\n      <MintComponent />\n      <iframe src=\"https://giphy.com/embed/NDJWGU4n74di0\" width=\"280\" height=\"280\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n    </div>\n  );\n\n\n  // runs function on page load if wallet is connected\n  useEffect(()=>{\n    detectWalletConnection();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Back to the Ether 🖖 NFT Collection </p>\n          {/* <p className=\"header-small gradient-text\">NFT Collection</p> */}\n          <p className=\"sub-text\">Each uniquely named.&nbsp; Each NOT of this 🌎.&nbsp; Discover your 👽 today.</p>\n        {currentAcct === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            connectedWallet()\n          )}\n\n          <NftCard opensea={OPENSEA_LINK}/>\n          </div>\n          <div className=\"body-container\">\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <p className=\"footer-text\">built by&nbsp;</p>\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`@${TWITTER_HANDLE_ME}`}</a>\n          <p>&nbsp;&nbsp;❌ &nbsp;&nbsp;</p>\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`@${TWITTER_HANDLE}`}</a>\n          <div className=\"open-sea\">\n          <a className=\"opensea-img\" href={OPENSEA_LINK} title=\"Buy on OpenSea\" target=\"_blank\"><img height=\"40px\" width=\"120px\" border-radius=\"5px\" box-shadow=\"0px 1px 6px rgba(0, 0, 0, 0.25)\" src=\"https://storage.googleapis.com/opensea-static/Logomark/Badge%20-%20Available%20On%20-%20Light.png\" alt=\"Available on OpenSea\" /></a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}