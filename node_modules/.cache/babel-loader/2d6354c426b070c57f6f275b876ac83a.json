{"ast":null,"code":"import { ethers } from 'ethers';\nimport DopeNft from \"../utils/dopeNft.json\";\nimport React, { useState } from 'react'; //Address of deployed contract\n\nconst CONTRACT_ADDRESS = \"0xcE15BBc069b34815163cc217bA0c32a1802E36F9\"; // console.log(CONTRACT_ADDRESS);\n\nconst mintComponent = () => {}; // Call to the contract to mint NFT \n\n\nconst triggerContractToMint = async () => {\n  try {\n    const {\n      ethereum\n    } = window;\n    console.log('here', CONTRACT_ADDRESS);\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n      console.log(\"Going to pop wallet now to pay gas...\");\n      let nftTranx = await connectedContract.constructDopeNft();\n      console.log(\"Mining...please wait.\");\n      await nftTranx.wait();\n      console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTranx.hash}`);\n    } else {\n      console.log(\"Ethereum object doesn't exist!\");\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}; // Event listener to the capture event function from contract.   \n\n\nconst mintEventListener = async () => {\n  try {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer); // Create connection to contract and emits (throws) it when from address and tokenId is passed in.\n\n      connectedContract.on(\"newAlienNFT\", (from, tokenId) => {\n        //safe check we have the right data\n        console.log(from, tokenId.toNumber());\n        alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n      });\n    } else {\n      alert(`Oops something went wrong`);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/nicholas-g/buildspace-nft-course-starter/src/eth/contractFunction.js"],"names":["ethers","DopeNft","React","useState","CONTRACT_ADDRESS","mintComponent","triggerContractToMint","ethereum","window","console","log","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftTranx","constructDopeNft","wait","hash","error","mintEventListener","on","from","tokenId","toNumber","alert"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,MAAMC,gBAAgB,GAAG,4CAAzB,C,CACA;;AAEA,MAAMC,aAAa,GAAE,MAAI,CAAE,CAA3B,C,CAEA;;;AACC,MAAMC,qBAAqB,GAAG,YAAY;AAEvC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBN,gBAApB;;AACA,QAAIG,QAAJ,EAAc;AACV,YAAMI,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCN,QAAlC,CAAjB;AACA,YAAMO,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,iBAAiB,GAAG,IAAIhB,MAAM,CAACiB,QAAX,CAAoBb,gBAApB,EAAsCH,OAAO,CAACiB,GAA9C,EAAmDJ,MAAnD,CAA1B;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,UAAIS,QAAQ,GAAG,MAAMH,iBAAiB,CAACI,gBAAlB,EAArB;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,YAAMS,QAAQ,CAACE,IAAT,EAAN;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAa,2DAA0DS,QAAQ,CAACG,IAAK,EAArF;AAED,KAXH,MAWS;AACLb,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACE,GAjBT,CAiBU,OAAOa,KAAP,EAAc;AAClBd,IAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACD;AACJ,CAtBJ,C,CAwBD;;;AACC,MAAMC,iBAAiB,GAAG,YAAY;AACrC,MAAI;AACF,UAAM;AAAEjB,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAID,QAAJ,EAAc;AACZ,YAAMI,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCN,QAAlC,CAAjB;AACA,YAAMO,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,iBAAiB,GAAG,IAAIhB,MAAM,CAACiB,QAAX,CACxBb,gBADwB,EAExBH,OAAO,CAACiB,GAFgB,EAGxBJ,MAHwB,CAA1B,CAHY,CASZ;;AACAE,MAAAA,iBAAiB,CAACS,EAAlB,CAAqB,aAArB,EAAoC,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACrD;AACAlB,QAAAA,OAAO,CAACC,GAAR,CAAYgB,IAAZ,EAAkBC,OAAO,CAACC,QAAR,EAAlB;AACAC,QAAAA,KAAK,CACF,kMAAiMzB,gBAAiB,IAAGuB,OAAO,CAACC,QAAR,EAAmB,EADtO,CAAL;AAGD,OAND;AAOD,KAjBD,MAiBO;AACLC,MAAAA,KAAK,CAAE,2BAAF,CAAL;AACD;AACF,GAtBD,CAsBE,OAAON,KAAP,EAAc;AACdd,IAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACD;AACF,CA1BA","sourcesContent":["import { ethers } from 'ethers';\nimport DopeNft from \"../utils/dopeNft.json\";\nimport React, { useState } from 'react';\n\n//Address of deployed contract\nconst CONTRACT_ADDRESS = \"0xcE15BBc069b34815163cc217bA0c32a1802E36F9\";\n// console.log(CONTRACT_ADDRESS);\n\nconst mintComponent =()=>{}\n\n// Call to the contract to mint NFT \n const triggerContractToMint = async () => {\n   \n    try {\n        const { ethereum } = window;\n        console.log('here', CONTRACT_ADDRESS);\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n\n            console.log(\"Going to pop wallet now to pay gas...\");\n            let nftTranx = await connectedContract.constructDopeNft();\n            console.log(\"Mining...please wait.\")\n            await nftTranx.wait();\n            console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTranx.hash}`);\n    \n          } else {\n            console.log(\"Ethereum object doesn't exist!\");\n          }\n            } catch (error) {\n          console.log(error)\n        }\n    };\n\n// Event listener to the capture event function from contract.   \n const mintEventListener = async () => {\n  try {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        DopeNft.abi,\n        signer\n      );\n\n      // Create connection to contract and emits (throws) it when from address and tokenId is passed in.\n      connectedContract.on(\"newAlienNFT\", (from, tokenId) => {\n        //safe check we have the right data\n        console.log(from, tokenId.toNumber());\n        alert(\n          `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n        );\n      });\n    } else {\n      alert(`Oops something went wrong`);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};"]},"metadata":{},"sourceType":"module"}