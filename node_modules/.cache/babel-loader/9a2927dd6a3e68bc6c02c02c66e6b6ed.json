{"ast":null,"code":"var _jsxFileName = \"/Users/nicholas-g/buildspace-nft-course-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  // state management for storing a users address\n  const [currentAcct, setCurrentAcct] = useState(\"\");\n  /*\n  * checking for meta mask wallet\n  */\n\n  const detectWalletConnection = async () => {\n    const {\n      ethereum\n    } = window; // signals if ethereum (Metamask) is not detected in the console for now\n    // update to make an alert \n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object!\", ethereum);\n    }\n    /*\n      * Check authorization on a users wallet.\n      * 'ethereum.request' using the method 'eth_accounts' allows for a check for any accounts that have been authorized.\n    */\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    }); //As long as is not zero can grab the first eth account availible.\n\n    if (accounts.length !== 0) {\n      const acct = accounts[0]; // setting the account found to state\n\n      setCurrentAcct(acct);\n    } else {\n      console.log(\"No Authorized Account Found\");\n    }\n  }; // establish wallted conntection\n\n\n  const walletConnect = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Need to get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // set wallet address to state once connected established\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAcct(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: walletConnect,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this); // Mint button that renders if a Metamask account is connected.\n\n\n  const renderMintButton = () => {\n    /*#__PURE__*/\n    _jsxDEV(\"button\", {\n      onClick: null,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Mint Alien NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this);\n  }; // runs function on page load if wallet is connected\n\n\n  useEffect(() => {\n    detectWalletConnection();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Back to the Ether NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), currentAcct === \"\" ? renderNotConnectedContainer() : renderMintButton()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"OHfSrJkS+GcLNCC+RmZ/8vnawyg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nicholas-g/buildspace-nft-course-starter/src/App.js"],"names":["React","useEffect","useState","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAcct","setCurrentAcct","detectWalletConnection","ethereum","window","console","log","accounts","request","method","length","acct","walletConnect","alert","error","renderNotConnectedContainer","renderMintButton","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  // state management for storing a users address\n  const [ currentAcct, setCurrentAcct ] = useState(\"\");\n\n  /*\n  * checking for meta mask wallet\n  */\n  const detectWalletConnection = async ()=>{\n    const { ethereum } = window;\n    // signals if ethereum (Metamask) is not detected in the console for now\n    // update to make an alert \n    if(!ethereum) {\n        console.log(\"Make sure you have metamask\");\n        return;\n      } else {\n    console.log(\"We have the ethereum object!\", ethereum);\n    }\n  \n/*\n  * Check authorization on a users wallet.\n  * 'ethereum.request' using the method 'eth_accounts' allows for a check for any accounts that have been authorized.\n*/\n  const accounts = await ethereum.request({ method: 'eth_accounts'});\n    \n  //As long as is not zero can grab the first eth account availible.\n  if (accounts.length !== 0) {\n      const acct = accounts[0];\n      // setting the account found to state\n      setCurrentAcct(acct);\n    } else {\n      console.log(\"No Authorized Account Found\");\n  }\n}\n  // establish wallted conntection\n  const walletConnect = async () =>{\n    try {\n      const { ethereum} = window;\n      if(!ethereum){\n        alert(\"Need to get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\"});\n      // set wallet address to state once connected established\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAcct(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={walletConnect} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  // Mint button that renders if a Metamask account is connected.\n  const renderMintButton = () =>{\n    <button onClick={null} className=\"cta-button connect-wallet-button\">\n      Mint Alien NFT\n    </button>\n  }\n  // runs function on page load if wallet is connected\n  useEffect(()=>{\n    detectWalletConnection();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Back to the Ether NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          { currentAcct === \"\" ? renderNotConnectedContainer() : renderMintButton()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}