{"ast":null,"code":"var _jsxFileName = \"/Users/nicholas-g/buildspace-nft-course-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport MintComponent from \"./components/mintComponent\";\nimport NftCard from \"./components/nftCard\";\nimport MintCount from \"./components/mintCount\";\nimport { mintEventListener } from \"./eth/helperFunc\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_HANDLE_ME = 'NickGonzalez__';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\n\nconst App = () => {\n  _s();\n\n  // state management for storing a users address\n  const [currentAcct, setCurrentAcct] = useState(\"\");\n  const [mining, setMining] = useState(false); // Checking for meta mask wallet.\n\n  const detectWalletConnection = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum.networkVersion != \"4\") {\n      alert(\"Need to be on the Rinkeby Test net!\");\n      return;\n    } // signals if ethereum (Metamask) is not detected in the console for now\n\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object!\", ethereum);\n    }\n\n    console.log(window.ethereum.networkVersion, 'window.ethereum.networkVersion'); //Check authorization on a users wallet.'ethereum.request' using the method 'eth_accounts' allows for a check for any accounts that have been authorized.\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    }); //As long as it is not zero, it can grab the first eth account availible.\n\n    if (accounts.length !== 0) {\n      const acct = accounts[0]; // setting the account found to state\n\n      setCurrentAcct(acct);\n      mintEventListener();\n    } else {\n      console.log(\"No Authorized Account Found\");\n    }\n  }; // Establish wallet conntection\n\n\n  const walletConnect = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum.networkVersion != \"4\") {\n        alert(\"Need to be on the Rinkeby Test net!\");\n        return;\n      }\n\n      if (!ethereum) {\n        alert(\"Need to get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // set wallet address to state once connected established\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAcct(accounts[0]);\n      mintEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: walletConnect,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this); // Mint button that renders if a Metamask account is connected.\n  // const renderMintButton = () =>(\n  //   <button onClick={triggerContractToMint} className=\"cta-button connect-wallet-button\">\n  //     Mint Alien NFT\n  //   </button>\n  // );\n  // runs function on page load if wallet is connected\n\n\n  useEffect(() => {\n    detectWalletConnection();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Back to the Ether \\uD83D\\uDD96  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header-medium gradient-text\",\n          children: \"NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique named.\\xA0 Each NOT of this \\uD83C\\uDF0E.\\xA0 Discover your \\uD83D\\uDC7D today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), currentAcct === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(MintComponent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: \"https://giphy.com/embed/NDJWGU4n74di0\",\n          width: \"280\",\n          height: \"280\",\n          frameBorder: \"0\",\n          class: \"giphy-embed\",\n          allowFullScreen: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NftCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MintCount, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"footer-text\",\n          children: \"built by\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `@${TWITTER_HANDLE_ME}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\xA0\\xA0\\u274C \\xA0\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `@${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"iGZm73kJdgUr/gLsyLmUauU/vWQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nicholas-g/buildspace-nft-course-starter/src/App.js"],"names":["React","useEffect","useState","MintComponent","NftCard","MintCount","mintEventListener","TWITTER_HANDLE","TWITTER_HANDLE_ME","TWITTER_LINK","OPENSEA_LINK","App","currentAcct","setCurrentAcct","mining","setMining","detectWalletConnection","ethereum","window","networkVersion","alert","console","log","accounts","request","method","length","acct","walletConnect","error","renderNotConnectedContainer","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport MintComponent from \"./components/mintComponent\";\n\nimport NftCard from \"./components/nftCard\";\nimport MintCount from \"./components/mintCount\";\nimport { mintEventListener } from \"./eth/helperFunc\";\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_HANDLE_ME = 'NickGonzalez__'\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\n\n\nconst App = () => {\n  // state management for storing a users address\n  const [ currentAcct, setCurrentAcct ] = useState(\"\");\n  const [ mining, setMining] = useState(false);\n  // Checking for meta mask wallet.\n  const detectWalletConnection = async () =>{\n   \n      const { ethereum } = window;\n      if(ethereum.networkVersion != \"4\"){\n      alert(\"Need to be on the Rinkeby Test net!\");\n      return;\n      }\n    // signals if ethereum (Metamask) is not detected in the console for now\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object!\", ethereum);\n    }\n    console.log(window.ethereum.networkVersion, 'window.ethereum.networkVersion');\n    \n    //Check authorization on a users wallet.'ethereum.request' using the method 'eth_accounts' allows for a check for any accounts that have been authorized.\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    //As long as it is not zero, it can grab the first eth account availible.\n    if (accounts.length !== 0) {\n      const acct = accounts[0];\n      // setting the account found to state\n      setCurrentAcct(acct);\n      mintEventListener();\n    } else {\n      console.log(\"No Authorized Account Found\");\n    }\n  }\n  // Establish wallet conntection\n const walletConnect = async () => {\n    try {\n      const { ethereum } = window;\n      if(ethereum.networkVersion != \"4\"){\n        alert(\"Need to be on the Rinkeby Test net!\");\n        return;\n      }\n      if (!ethereum) {\n        alert(\"Need to get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      // set wallet address to state once connected established\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAcct(accounts[0]);\n      mintEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={walletConnect} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  // Mint button that renders if a Metamask account is connected.\n  // const renderMintButton = () =>(\n  //   <button onClick={triggerContractToMint} className=\"cta-button connect-wallet-button\">\n  //     Mint Alien NFT\n  //   </button>\n  // );\n\n  // runs function on page load if wallet is connected\n  useEffect(()=>{\n    detectWalletConnection();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Back to the Ether 🖖  </p>\n          <p className=\"header-medium gradient-text\">NFT Collection</p>\n          <p className=\"sub-text\">Each unique named.&nbsp; Each NOT of this 🌎.&nbsp; Discover your 👽 today.</p>\n          <p className=\"sub-text\"></p>\n          {currentAcct === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <MintComponent />\n          )}\n          </div>\n          <div className=\"body-container\">\n          <iframe src=\"https://giphy.com/embed/NDJWGU4n74di0\" width=\"280\" height=\"280\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n\n          <NftCard />\n          <MintCount />\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <p className=\"footer-text\">built by&nbsp;</p>\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`@${TWITTER_HANDLE_ME}`}</a>\n          <p>&nbsp;&nbsp;❌ &nbsp;&nbsp;</p>\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`@${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}