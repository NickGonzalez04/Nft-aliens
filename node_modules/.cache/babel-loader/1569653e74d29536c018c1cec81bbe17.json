{"ast":null,"code":"var _jsxFileName = \"/Users/nicholas-g/buildspace-nft-course-starter/src/components/mintComponent.js\",\n    _s = $RefreshSig$();\n\nimport { ethers } from 'ethers';\nimport DopeNft from \"../utils/dopeNft.json\";\nimport React, { useState, useEffect } from 'react';\nimport MineLoader from \"./loading\"; //Address of deployed contract\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x1238E2c79e1a138974cc9f620D845AC540c55C4b\";\n;\n\nconst MintComponent = () => {\n  _s();\n\n  const [mining, setMining] = useState(false);\n  const [mintCount, setmintCount] = useState(0); // Call to the contract to mint NFT \n\n  const triggerContractToMint = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      console.log('here', CONTRACT_ADDRESS);\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n        let nftAmount = connectedContract.getTotalMints();\n        console.log(nftAmount);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTranx = await connectedContract.constructDopeNft();\n        setMining(true);\n        console.log(\"Mining...please wait.\");\n        await nftTranx.wait();\n        setMining(false);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTranx.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getNftCount = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      console.log('here', CONTRACT_ADDRESS);\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n        let nftAmount = await connectedContract.getTotalMints();\n        let amount = parseInt(nftAmount);\n        setmintCount(amount);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getNftCount();\n  }, []);\n\n  if (mining) {\n    return /*#__PURE__*/_jsxDEV(MineLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: triggerContractToMint,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Mint My Alien NFT !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text\",\n      children: [mintCount, \" / 50\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this);\n};\n\n_s(MintComponent, \"zSsNqSleHpQ3Nwz4cTJ3j+2Jd14=\");\n\n_c = MintComponent;\nexport default MintComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintComponent\");","map":{"version":3,"sources":["/Users/nicholas-g/buildspace-nft-course-starter/src/components/mintComponent.js"],"names":["ethers","DopeNft","React","useState","useEffect","MineLoader","CONTRACT_ADDRESS","MintComponent","mining","setMining","mintCount","setmintCount","triggerContractToMint","ethereum","window","console","log","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftAmount","getTotalMints","nftTranx","constructDopeNft","wait","hash","error","getNftCount","amount","parseInt"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\nimport DopeNft from \"../utils/dopeNft.json\";\nimport React, { useState, useEffect } from 'react';\nimport MineLoader from \"./loading\";\n//Address of deployed contract\nconst CONTRACT_ADDRESS = \"0x1238E2c79e1a138974cc9f620D845AC540c55C4b\";\n;\n\nconst MintComponent = ()=>{\n  const [mining, setMining ] = useState(false);\n  const [mintCount, setmintCount] = useState(0)\n// Call to the contract to mint NFT \n const triggerContractToMint = async () => {\n   \n    try {\n        const { ethereum } = window;\n        console.log('here', CONTRACT_ADDRESS);\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n            let nftAmount = connectedContract.getTotalMints();\n            console.log(nftAmount);\n            console.log(\"Going to pop wallet now to pay gas...\");\n            let nftTranx = await connectedContract.constructDopeNft();\n            setMining(true);\n            console.log(\"Mining...please wait.\")\n            await nftTranx.wait();\n            setMining(false);\n            console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTranx.hash}`);\n    \n          } else {\n            console.log(\"Ethereum object doesn't exist!\");\n          }\n            } catch (error) {\n          console.log(error)\n        }\n    };\n\n    const getNftCount = async () => {\n      try {\n        const { ethereum } = window;\n        console.log('here', CONTRACT_ADDRESS);\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n            let nftAmount = await connectedContract.getTotalMints();\n            let amount = parseInt(nftAmount)\n            setmintCount(amount);\n        }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\nuseEffect(()=>{\n    getNftCount()\n}, [])\n\n    if(mining) {\n      return <MineLoader />;\n    }\n\n\n  return (\n  <div>\n   <button onClick={triggerContractToMint} className=\"cta-button connect-wallet-button\">\n      Mint My Alien NFT !\n    </button>\n    <p className=\"sub-text\">{mintCount} / 50</p>\n  </div>\n  )\n};\n\nexport default MintComponent;"]},"metadata":{},"sourceType":"module"}