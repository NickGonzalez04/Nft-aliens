{"ast":null,"code":"var _jsxFileName = \"/Users/nicholas-g/buildspace-nft-course-starter/src/components/mintCount.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport DopeNft from \"../utils/dopeNft.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x1238E2c79e1a138974cc9f620D845AC540c55C4b\";\nconst TOTAL_MINT_COUNT = 50;\n\nconst MintCount = () => {\n  _s();\n\n  const [mintCount, setmintCount] = useState(0);\n\n  const getNftCount = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      console.log('here', CONTRACT_ADDRESS);\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n        let nftAmount = await connectedContract.getTotalMints();\n        let amount = parseInt(nftAmount);\n        setmintCount(amount);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getNftCount();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"header-medium gradient-text-count\",\n      children: [mintCount, \" / \", TOTAL_MINT_COUNT]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MintCount, \"xyNaLAZE8uXOV7OZ5+4X185O8mw=\");\n\n_c = MintCount;\nexport default MintCount;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintCount\");","map":{"version":3,"sources":["/Users/nicholas-g/buildspace-nft-course-starter/src/components/mintCount.js"],"names":["React","useState","useEffect","ethers","DopeNft","CONTRACT_ADDRESS","TOTAL_MINT_COUNT","MintCount","mintCount","setmintCount","getNftCount","ethereum","window","console","log","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftAmount","getTotalMints","amount","parseInt","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AACA,MAAMC,gBAAgB,GAAG,4CAAzB;AACA,MAAMC,gBAAgB,GAAG,EAAzB;;AAGA,MAAMC,SAAS,GAAG,MAAK;AAAA;;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;;AAEA,QAAMS,WAAW,GAAG,YAAY;AAC5B,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAeC,MAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBT,gBAApB;;AACA,UAAIM,QAAJ,EAAc;AACV,cAAMI,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCN,QAAlC,CAAjB;AACA,cAAMO,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,iBAAiB,GAAG,IAAIjB,MAAM,CAACkB,QAAX,CAAoBhB,gBAApB,EAAsCD,OAAO,CAACkB,GAA9C,EAAmDJ,MAAnD,CAA1B;AACA,YAAIK,SAAS,GAAG,MAAMH,iBAAiB,CAACI,aAAlB,EAAtB;AACA,YAAIC,MAAM,GAAGC,QAAQ,CAACH,SAAD,CAArB;AACAd,QAAAA,YAAY,CAACgB,MAAD,CAAZ;AACH;AACJ,KAXC,CAWA,OAAOE,KAAP,EAAc;AACdd,MAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACD;AACF,GAfD;;AAkBFzB,EAAAA,SAAS,CAAC,MAAI;AACVQ,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAKA,sBACE;AAAA,2BACI;AAAG,MAAA,SAAS,EAAC,mCAAb;AAAA,iBAAkDF,SAAlD,SAAgEF,gBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAIE,CA9BJ;;GAAMC,S;;KAAAA,S;AAgCJ,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport DopeNft from \"../utils/dopeNft.json\";\nconst CONTRACT_ADDRESS = \"0x1238E2c79e1a138974cc9f620D845AC540c55C4b\";\nconst TOTAL_MINT_COUNT = 50;\n\n\nconst MintCount = () =>{\n    const [mintCount, setmintCount] = useState(0);\n\n    const getNftCount = async () => {\n        try {\n          const { ethereum } = window;\n          console.log('here', CONTRACT_ADDRESS);\n          if (ethereum) {\n              const provider = new ethers.providers.Web3Provider(ethereum);\n              const signer = provider.getSigner();\n              const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DopeNft.abi, signer);\n              let nftAmount = await connectedContract.getTotalMints();\n              let amount = parseInt(nftAmount)\n              setmintCount(amount);\n          }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  \n  \n  useEffect(()=>{\n      getNftCount()\n  }, []);\n\n\n  return(\n    <div>\n        <p className=\"header-medium gradient-text-count\">{mintCount} / {TOTAL_MINT_COUNT}</p>\n    </div>\n  )};\n\n  export default MintCount;"]},"metadata":{},"sourceType":"module"}